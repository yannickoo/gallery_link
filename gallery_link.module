<?php

/**
 * @file
 * Gallery link
 *
 * This module provides a field formatter for displaying images as gallery.
 */

/* We define the version of fancybox here so that it's easy to update. */
define('GALLERY_LINK_FANCYBOX_VERSION', '1.3.4');

/**
 * Implements hook_theme().
 */
function gallery_link_theme() {
  return array(
    'gallery_link' => array(
      'variables' => array('items' => array(), 'link_text' => NULL, 'style' => NULL, 'link_options' => array(), 'fancybox_options' => array()),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function gallery_link_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {

    // Get path to fancybox library.
    $path = libraries_get_path('fancybox');
    // Check whether necessary css and js files are available.
    $css = file_exists($path . '/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.css');
    $js = file_exists($path . '/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.pack.js');

    // If they not available, report an error.
    if (!$css && !$js) {
      $requirements['gallery_link_fancybox'] = array(
        'title' => $t('Gallery link'),
        'value' => $t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('You need to <a href="!url">download</a> fancybox @version and put the extracted fancybox folder into <code>sites/all/libraries/</code>.', array(
          '!url' => url('http://fancybox.googlecode.com/files/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.zip'),
          '@version' => GALLERY_LINK_FANCYBOX_VERSION,
        )),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_field_formatter_info().
 */
function gallery_link_field_formatter_info() {
  return array(
    'gallery_link' => array(
      'label' => t('Gallery link'),
      'field types' => array('image'),
      'settings' => array(
        'style' => 'large',
        'link_text' => 'Open gallery',
        'fancybox_options' => array(
          'padding' => 10,
          'margin' => 20,
          'opacity' => false,
          'modal' => false,
          'cyclic' => false,
          'scrolling' => 'auto',
          'width' => 560,
          'height' => 340,
          'autoScale' => true,
          'autoDimensions' => true,
          'centerOnScroll' => false,
          'ajax' => '{}',
          'swf' => "{wmode: 'transparent'}",
          'hideOnOverlayClick' => true,
          'hideOnContentClick' => false,
          'overlayShow' => true,
          'overlayOpacity' => 30,
          'overlayColor' => '#666',
          'titleShow' => true,
          'titlePosition' => 'outside',
          'titleFormat' => null,
          'transitionIn' => 'fade',
          'transitionOut' => 'fade',
          'speedIn' => 300,
          'speedOut' => 300,
          'changeSpeed' => 300,
          'changeFade' => 'fast',
          'easingIn' => 'swing',
          'easingOut' => 'swing',
          'showCloseButton' => true,
          'showNavArrows' => true,
          'enableEscapeButton' => true,
          'onStart' => null,
          'onCancel' => null,
          'onComplete' => null,
          'onCleanup' => null,
          'onClosed' => null,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function gallery_link_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  // This gets the view mode where the settings are stored.
  $display = $instance['display'][$view_mode];
  // This gets the settings.
  $settings = $display['settings'];

  $element = array();

  // Allow to use original image.
  $styles = array('' => t('- None -'));

  // Load all image styles.
  $image_styles = image_styles();
  $styles += drupal_map_assoc(array_keys($image_styles));

  $element['style'] = array(
    '#type' => 'select',
    '#title' => t('Image style'),
    '#description' => t('Select the style of the gallery images'),
    '#default_value' => $settings['style'],
    '#options' => $styles,
  );

  $element['link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#description' => t('This text triggers the gallery on click.'),
    '#default_value' => $settings['link_text'],
  );

  $element['fancybox_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fancybox options'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  // @TODO: Don't forget to validate whether value is integer!
  $element['fancybox_options']['padding'] = array(
    '#type' => 'textfield',
    '#title' => t('Padding'),
    '#description' => t('Space between FancyBox wrapper and content'),
    '#default_value' => $settings['fancybox_options']['padding'],
    '#size' => 4,
    '#field_suffix' => 'px',
  );

  // @TODO: Don't forget to validate whether value is integer!
  $element['fancybox_options']['margin'] = array(
    '#type' => 'textfield',
    '#title' => t('Margin'),
    '#description' => t('Space between viewport and FancyBox wrapper'),
    '#default_value' => $settings['fancybox_options']['margin'],
    '#size' => 4,
    '#field_suffix' => 'px',
  );

  $element['fancybox_options']['opacity'] = array(
    '#type' => 'checkbox',
    '#title' => t('Opacity'),
    '#description' => t('When true, transparency of content is changed for elastic transitions.'),
    '#default_value' => $settings['fancybox_options']['opacity'],
  );

  $element['fancybox_options']['modal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Modal'),
    '#description' => t("When true, 'overlayShow' is set to 'true' and 'hideOnOverlayClick', 'hideOnContentClick', 'enableEscapeButton', 'showCloseButton' are set to 'false'."),
    '#default_value' => $settings['fancybox_options']['modal'],
  );

  $element['fancybox_options']['cyclic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Modal'),
    '#description' => t('When true, galleries will be cyclic, allowing you to keep pressing next/back.'),
    '#default_value' => $settings['fancybox_options']['cyclic'],
  );

  $element['fancybox_options']['scrolling'] = array(
    '#type' => 'select',
    '#title' => t('Scrolling'),
    '#description' => t("Set the overflow CSS property to create or hide scrollbars."),
    '#default_value' => $settings['fancybox_options']['scrolling'],
    '#options' => array(
      'auto' => t('Auto'),
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
  );

  // @TODO: Don't forget to validate whether value is integer!
  $element['fancybox_options']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#description' => t("Width for content types 'iframe' and 'swf'. Also set for inline content if 'autoDimensions' is set to 'false'."),
    '#default_value' => $settings['fancybox_options']['width'],
    '#size' => 4,
    '#field_suffix' => 'px',
  );

  // @TODO: Don't forget to validate whether value is integer!
  $element['fancybox_options']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#description' => t("Height for content types 'iframe' and 'swf'. Also set for inline content if 'autoDimensions' is set to 'false'."),
    '#default_value' => $settings['fancybox_options']['height'],
    '#size' => 4,
    '#field_suffix' => 'px',
  );

  $element['fancybox_options']['autoScale'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto scale'),
    '#description' => t('If true, FancyBox is scaled to fit in viewport.'),
    '#default_value' => $settings['fancybox_options']['autoScale'],
  );

  $element['fancybox_options']['autoDimensions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto dimensions'),
    '#description' => t('For inline and ajax views, resizes the view to the element recieves. Make sure it has dimensions otherwise this will give unexpected results.'),
    '#default_value' => $settings['fancybox_options']['autoDimensions'],
  );

  $element['fancybox_options']['centerOnScroll'] = array(
    '#type' => 'checkbox',
    '#title' => t('Center on scroll'),
    '#description' => t('When true, FancyBox is centered while scrolling page.'),
    '#default_value' => $settings['fancybox_options']['centerOnScroll'],
  );

  // ajax
  // swf

  $element['fancybox_options']['hideOnOverlayClick'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide on overlay click'),
    '#description' => t('Toggle if clicking the overlay should close FancyBox.'),
    '#default_value' => $settings['fancybox_options']['hideOnOverlayClick'],
  );

  $element['fancybox_options']['hideOnContentClick'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide on content click'),
    '#description' => t('Toggle if clicking the content should close FancyBox.'),
    '#default_value' => $settings['fancybox_options']['hideOnContentClick'],
  );

  $element['fancybox_options']['overlayShow'] = array(
    '#type' => 'checkbox',
    '#title' => t('Overlay show'),
    '#description' => t('Toggle overlay.'),
    '#default_value' => $settings['fancybox_options']['overlayShow'],
  );

  $element['fancybox_options']['overlayOpacity'] = array(
    '#type' => 'select',
    '#title' => t('Overlay opacity'),
    '#description' => t('Opacity of the overlay.'),
    '#default_value' => $settings['fancybox_options']['overlayOpacity'],
    '#options' => drupal_map_assoc(array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)),
    '#field_suffix' => '%',
  );

  // @TODO: Add more settings like fancybox options etc.
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gallery_link_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Place a gallery link with %style images and the trigger text is "%link_text".', array(
    '%style' => $settings['style'],
    '%link_text' => $settings['link_text'],
      ));
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function gallery_link_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // We store all settings in a variable.
  $settings = $display['settings'];
  // We also store the settings directly in a variable.
  $style = $settings['style'];
  $link_text = $settings['link_text'];
  $fancybox_options = $settings['fancybox_options'];

  $variables = array(
    'items' => $items,
    'link_text' => $link_text,
    'style' => $style,
    'fancybox_options' => $fancybox_options,
  );

  $element[0]['#markup'] = theme('gallery_link', $variables);

  return $element;
}

/**
 * Returns a link which triggers a gallery
 *
 * @param array $variables
 *   An array which contains the field values.
 *
 *   link_text (string)
 *     This is the text of the trigger link
 *   style (string)
 *     The images will be display with this image style
 *   link_options (array)
 *     (optional) Here can you pass an array which is structured like the
 *     options from the l() function
 *   fancybox_options (array)
 *     (optional) Here you can pass an array which defines the fancybox options
 *     (http://fancybox.net/api)
 *
 * @return string
 *   A link which triggers the gallery on click
 */
function theme_gallery_link($variables) {
dsm($variables);
  // Getting all variables.
  $items = $variables['items'];
  $link_text = $variables['link_text'];
  $style = $variables['style'];
  $link_options = $variables['link_options'];
  $fancybox_options = $variables['fancybox_options'];

  // We count so that we can support multiple galleries.
  static $counter = 0;
  $data = array();
  $data['images'] = array();
  $output = '';

  foreach ($items as $delta => $item) {
    $data['images'][$delta]['href'] = ($style != '') ? image_style_url($style, $item['uri']) : file_create_url($item['uri']);

    // Store the image title.
    if (!empty($item['title'])) {
      $data['images'][$delta]['title'] = check_plain($item['title']);
    }
  }

  if (isset($fancybox_options) && $fancybox_options) {
    $data['options'] = $fancybox_options;
  }

  // We add needed files for fancybox and our custom javascript file.
  drupal_add_css(libraries_get_path('fancybox') . '/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.css');
  drupal_add_css(drupal_get_path('module', 'gallery_link') . '/gallery_link.css');
  drupal_add_js(libraries_get_path('fancybox') . '/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.pack.js');
  drupal_add_js(drupal_get_path('module', 'gallery_link') . '/gallery_link.js');

  // We put the $data array into the Drupal.settings.gallery_link.
  drupal_add_js(array('gallery_link' => array($data)), 'setting');

  // We add a an attribute which stores the gallery id ($counter)
  $link_options['attributes']['data-gallery-id'] = $counter;

  // Use default link text when no $link_text was set.
  $link_text = ($link_text) ? $link_text : t('Open gallery');
  // Now we print the link with given $link_text and all given $options
  $output .= l($link_text, '', $link_options);

  $counter++;

  return $output;
}
