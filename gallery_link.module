<?php

// We define the version of fancybox here so that it's easy to update
define('FANCYBOX_VERSION', '1.3.4');

/**
 * Implements hook_themey().
 */
function gallery_link_theme() {
  return array(
    'gallery_link' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Returns a boolean whether an imagecache preset is available
 *
 * @param $preset
 *   The name of the imagecache preset
 *
 */
function _gallery_link_imagecache_preset_available($preset) {
  if (module_exists('imagecache')) {
    // We build an array where we're putting previous queries for caching
    static $imagecache_presets = array();

    if (isset($imagecache_presets[$preset])) {
      return $imagecache_presets[$preset];
    }
    else {
      if (db_result(db_query("SELECT presetname FROM {imagecache_preset} WHERE presetname = '%s'", $preset))) {
        $imagecache_presets[$preset] = TRUE;
        return TRUE;
      }
      else {
        // If the wanted imagecache preset isn't available we report it!
        watchdog('gallery_link', t('Imagecache preset %preset doesn\'t exist.', array('%preset' => $preset)), WATCHDOG_ERROR);
      }
    }
  }

  return FALSE;
}

/**
 * Returns a link which triggers a slideshow
 *
 * @param $element
 *   $element is an array which contains the images.
 *   $element = array(
 *     array('file' => $fid),
 *     array('file' => $fid),
 *     array('file' => $fid),
 *   );
 * @param $preset
 *   The images will be display with this imagecache preset
 * @param $text
 *   This is the text of the trigger link
 * @param $options
 *   (optional) Here can you pass an array which is structured like the options
 *   from the l() function
 *
 */
function theme_gallery_link($element = array(), $link_text, $preset, $link_options = array(), $fancybox_options = array()) {
  // We count so that we can support multiple slideshows
  static $counter = 0;
  $data = array();
  $data['images'] = array();
  $output = '';
  if (isset($preset) && $preset && !_gallery_link_imagecache_preset_available($preset)) {
    // If $preset is set but isn't available we empty $preset
    $preset = '';
  }
  foreach ($element as $item) {
    ($item['title']) ? $title = $item['title'] : $title = '';
    ($preset) ? $path = gallery_link_get_file_path($item['file'], $preset) : $path = gallery_link_get_file_path($item['file']);
    if ($path) {
      $data['images'][] = array(
        'href' => $path,
        'title' => $title,
      );
    }
  }

  if (isset($fancybox_options) && $fancybox_options) {
    $data['options'] = $fancybox_options;
  }

  // We add needed files for fancybox and our custom javascript file
  drupal_add_css(libraries_get_path('fancybox') . '/jquery.fancybox-' . FANCYBOX_VERSION . '.css');
  drupal_add_js(libraries_get_path('fancybox') . '/jquery.fancybox-' . FANCYBOX_VERSION . '.pack.js');
  drupal_add_js(drupal_get_path('module', 'gallery_link') . '/gallery_link.js');

  // We put the $data array into the Drupal.settings.gallery_link
  drupal_add_js(array('gallery_link' => array($data)), 'setting');

  // We add a "data-gallery-id" attribute where we save the gallery id ($counter)
  $link_options['attributes']['data-gallery-id'] = $counter;

  // Now we print the link with given $link_text and all given $options
  $output .= l($link_text, '', $link_options);

  $counter++;

  return $output;
}

/**
 * Returns a path to a file
 *
 * @param $file
 *   Can be a file id or a file path
 * @param $preset
 *   (optional) The name of the imagecache preset you want
 *
 */
function gallery_link_get_file_path($file, $preset = NULL) {
  // We check whether $file can be a file id
  if (is_numeric($file)) {
    // We load the file
    $file = field_file_load($file);
    if ($file) {
      // We check whether a preset was given and imagecache module is enabled
      if (isset($preset) && $preset && module_exists('imagecache')) {
        // We check whether the given preset exists
        if (_gallery_link_imagecache_preset_available($preset)) {
          $path = url(file_directory_path() . '/' . 'imagecache/' . $preset . '/' . $file['filepath']);
        }
        else {
          // If the given preset isn't available we ignore it and use the normal file path
          $path = url($file['filepath']);
        }
      }
      else {
        $path = url($file['filepath']);
      }
    }
    else {
      $path = '';
    }
  }
  else {
    // $file isn't numeric so we guess that this is a file path
    $path = $file;

    // We check if the file path could be an internal one
    $path_parsed = parse_url($path);
    if (!isset($path_parsed['scheme'])) {
      if (strpos($path, '/') === 0) {
        $path = substr($path, 1);
      }
      $path = url(file_directory_path() . '/' . 'imagecache/' . $preset . '/' . $path);
    }
  }
  return $path;
}