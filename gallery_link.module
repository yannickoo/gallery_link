<?php

/**
 * @file
 * Main file for Gallery Link module.
 */

/**
 * Implements hook_field_formatter_info().
 */
function gallery_link_field_formatter_info() {
  return array(
    'gallery_link' => array(
      'label' => t('Gallery Link'),
      'field types' => array('image'),
      'settings' => array(
        'style' => 'large',
        'link_text' => 'Open gallery',
        'fancybox_options' => array(
          'style' => array(
            'padding' => 15,
            'margin' => 20,
            'width' => 800,
            'height' => 600,
            'closeBtn' => 1,
            'arrows' => 1,
            'scrolling' => 'auto',
          ),
          'animations' => array(
            'open' => array(
              'effect' => 'fade',
              'speed' => '250',
              'easing' => 'swing',
              'opacity' => 1,
              'method' => 'zoomIn',
            ),
            'close' => array(
              'effect' => 'fade',
              'speed' => '250',
              'easing' => 'swing',
              'opacity' => 1,
              'method' => 'zoomOut',
            ),
            'next' => array(
              'effect' => 'elastic',
              'speed' => '250',
              'easing' => 'swing',
              'opacity' => 1,
              'method' => 'changeIn',
            ),
            'prev' => array(
              'effect' => 'elastic',
              'speed' => '250',
              'easing' => 'swing',
              'opacity' => 1,
              'method' => 'changeOut',
            ),
          ),
          'behavior' => array(
            'closeClick' => 0,
            'nextClick' => 0,
            'mouseWheel' => 1,
            'autoPlay' => 0,
            'playSpeed' => '3000',
            'preload' => '3',
            'modal' => 0,
            'loop' => 1,
              // @TODO: Implement these.
            /*'keys' => array(
              'next' => array('13, 34, 39, 40'),
              'prev' => array('8, 33, 37, 38'),
              'close' => array('27'),
              'play' => array('32'),
              'toggle' => array('70'),
            ),*/
          ),
          'helpers' => array(
            'overlay' => 1,
            'title' => 1,
            'title_position' => 'float',
            'buttons' => 0,
            'enable_thumbs' => 0,
            'thumbs' => array('width' => '50', 'height' => '50'),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function gallery_link_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  // This gets the view mode where the settings are stored.
  $display = $instance['display'][$view_mode];
  // This gets the settings.
  $settings = $display['settings'];
  // This gets the entity type.
  $entity_type = $instance['entity_type'];

  $element = array();

  // Load all image styles.
  $image_styles = image_style_options(FALSE);

  $element['style'] = array(
    '#type' => 'select',
    '#title' => t('Image style'),
    '#description' => t('Select the style of the gallery images'),
    '#default_value' => $settings['style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $element['link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#description' => t('This text triggers the gallery on click'),
    '#default_value' => $settings['link_text'],
  );

  if (module_exists('token')) {
    $element['token'] = array(
      '#type' => 'container',
      '#theme' => 'token_tree',
      '#token_types' => array($entity_type),
      '#dialog' => TRUE,
    );
  }

  $element['fancybox_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fancybox options'),
    '#collapsible' => TRUE,
    // Sorry for the target="_blank" but otherwise your settings would be lost.
    '#description' => t('For more information about the options checkout the <a href="@documentation" target="_blank">documentation</a>.', array('@documentation' => url('http://fancyapps.com/fancybox/#docs'))),
  );

  $element['fancybox_options']['style'] = array(
    '#type' => 'fieldset',
    '#title' => t('Style'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  $element['fancybox_options']['animations'] = array(
    '#type' => 'fieldset',
    '#title' => t('Animations'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  $element['fancybox_options']['behavior'] = array(
    '#type' => 'fieldset',
    '#title' => t('Behavior'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
    //'#access' => FALSE,
  );

  $element['fancybox_options']['helpers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Helpers'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  $element['fancybox_options']['style']['padding'] = array(
    '#type' => 'textfield',
    '#title' => t('Padding'),
    '#description' => t('Space between FancyBox wrapper and content'),
    '#default_value' => $settings['fancybox_options']['style']['padding'],
    '#size' => 4,
    '#field_suffix' => 'px',
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['fancybox_options']['style']['margin'] = array(
    '#type' => 'textfield',
    '#title' => t('Margin'),
    '#description' => t('Space between viewport and FancyBox wrapper'),
    '#default_value' => $settings['fancybox_options']['style']['margin'],
    '#size' => 4,
    '#field_suffix' => 'px',
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['fancybox_options']['style']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $settings['fancybox_options']['style']['width'],
    '#size' => 4,
    '#field_suffix' => 'px',
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['fancybox_options']['style']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $settings['fancybox_options']['style']['height'],
    '#size' => 4,
    '#field_suffix' => 'px',
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $element['fancybox_options']['style']['closeBtn'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show close button'),
    '#description' => t('Toggle close button'),
    '#default_value' => $settings['fancybox_options']['style']['closeBtn'],
  );

  $element['fancybox_options']['style']['arrows'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show navigation arrows'),
    '#description' => t('Toggle navigation arrows'),
    '#default_value' => $settings['fancybox_options']['style']['arrows'],
  );

  $element['fancybox_options']['style']['scrolling'] = array(
    '#type' => 'select',
    '#title' => t('Scrolling'),
    '#default_value' => $settings['fancybox_options']['style']['scrolling'],
    '#options' => array(
      'auto' => t('Auto'),
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#description' => t("Set the overflow CSS property to create or hide scrollbars. Can be set to 'auto', 'yes', 'no' or 'visible'"),
  );

  foreach (array('open', 'close', 'next', 'prev') as $key) {
    $element['fancybox_options']['animations'][$key] = array(
      '#type' => 'fieldset',
      '#title' => $key,
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );

    $element['fancybox_options']['animations'][$key]['effect'] = array(
      '#type' => 'select',
      '#title' => t('Effect'),
      '#options' => drupal_map_assoc(array('elastic', 'fade', 'none')),
      '#default_value' => $settings['fancybox_options']['animations'][$key]['effect'],
    );

    $element['fancybox_options']['animations'][$key]['speed'] = array(
      '#type' => 'textfield',
      '#title' => t('Speed out'),
      '#description' => t('Speed of the fade and elastic transitions, in milliseconds'),
      '#default_value' => $settings['fancybox_options']['animations'][$key]['speed'],
      '#size' => 4,
      '#field_suffix' => 'ms',
      '#element_validate' => array('element_validate_integer_positive'),
    );

    $element['fancybox_options']['animations'][$key]['easing'] = array(
      '#type' => 'select',
      '#title' => t('Easing in'),
      '#description' => t('Easing used for elastic animations'),
      '#default_value' => $settings['fancybox_options']['animations'][$key]['easing'],
      '#options' => drupal_map_assoc(array(
        'swing',
        'easeIn',
        'easeOut',
        'easeInOut',
        'expoin',
        'expoout',
        'expoinout',
        'bouncein',
        'bounceout',
        'bounceinout',
        'elasin',
        'elasout',
        'elasinout',
        'backin',
        'backout',
        'backinout',
      )),
    );

    if ($key == 'open' || $key == 'close') {
      $element['fancybox_options']['animations'][$key]['opacity'] = array(
        '#type' => 'checkbox',
        '#title' => t('Opacity'),
        '#description' => t('Opacity sth.'),
        '#default_value' => $settings['fancybox_options']['animations'][$key]['opacity'],
      );
    }

    $element['fancybox_options']['animations'][$key]['method'] = array(
      '#type' => 'select',
      '#title' => t('Method'),
      '#default_value' => $settings['fancybox_options']['animations'][$key]['method'],
      '#options' => drupal_map_assoc(array('zoomIn', 'zoomOut', 'changeIn', 'changeOut')),
    );
  }

  $element['fancybox_options']['behavior']['closeClick'] = array(
    '#type' => 'checkbox',
    '#title' => t('Close click'),
    '#default_value' => $settings['fancybox_options']['behavior']['closeClick'],
    '#description' => t('If set to true, fancyBox will be closed when user clicks the content'),
  );

  $element['fancybox_options']['behavior']['nextClick'] = array(
    '#type' => 'checkbox',
    '#title' => t('Next click'),
    '#default_value' => $settings['fancybox_options']['behavior']['nextClick'],
    '#description' => t('If set to true, will navigate to next gallery item when user clicks the content'),
  );

  $element['fancybox_options']['behavior']['autoPlay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto play'),
    '#default_value' => $settings['fancybox_options']['behavior']['autoPlay'],
    '#description' => t('If set to true, slideshow will start after opening the first gallery item'),
  );

  $element['fancybox_options']['behavior']['playSpeed'] = array(
    '#type' => 'textfield',
    '#title' => t('Play speed'),
    '#default_value' => $settings['fancybox_options']['behavior']['playSpeed'],
    '#element_validate' => array('element_validate_integer'),
    '#description' => t('Slideshow speed in milliseconds'),
  );

  $element['fancybox_options']['behavior']['mouseWheel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable mouse wheel navigation'),
    '#default_value' => $settings['fancybox_options']['behavior']['mouseWheel'],
  );

  $element['fancybox_options']['behavior']['preload'] = array(
    '#type' => 'textfield',
    '#title' => t('Images to preload'),
    '#default_value' => $settings['fancybox_options']['behavior']['preload'],
    '#element_validate' => array('element_validate_integer'),
    '#description' => t('Number of gallery images to preload'),
  );

  $element['fancybox_options']['behavior']['modal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Modal'),
    '#default_value' => $settings['fancybox_options']['behavior']['modal'],
    '#description' => t('If set to true, will disable navigation and closing'),
  );

  $element['fancybox_options']['behavior']['loop'] = array(
    '#type' => 'checkbox',
    '#title' => t('Loop'),
    '#default_value' => $settings['fancybox_options']['behavior']['loop'],
    '#description' => t('If set to true, enables cyclic navigation. This means, if you click "next" after you reach the last element, first element will be displayed (and vice versa).'),
  );

  $element['fancybox_options']['behavior']['keys'] = array(
    '#type' => 'fieldset',
    '#title' => t('Keys'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
    '#description' => 'Currently not implemented :(',
  );

  $element['fancybox_options']['helpers']['overlay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show overlay'),
    '#description' => t('Toggle overlay'),
    '#default_value' => $settings['fancybox_options']['helpers']['overlay'],
  );

  $element['fancybox_options']['helpers']['title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show title'),
    '#description' => t('Toggle title'),
    '#default_value' => $settings['fancybox_options']['helpers']['title'],
  );

  $element['fancybox_options']['helpers']['title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show title'),
    '#description' => t('Toggle title'),
    '#default_value' => $settings['fancybox_options']['helpers']['title'],
  );

  $element['fancybox_options']['helpers']['title_position'] = array(
    '#type' => 'select',
    '#title' => t('Title position'),
    '#description' => t("The position of title. Can be set to 'outside', 'inside' or 'over'"),
    '#default_value' => $settings['fancybox_options']['helpers']['title_position'],
    '#options' => drupal_map_assoc(array('float', 'inside', 'outside', 'over')),
  );

  $element['fancybox_options']['helpers']['buttons'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable buttons'),
    '#default_value' => $settings['fancybox_options']['helpers']['buttons'],
  );

  $element['fancybox_options']['helpers']['enable_thumbs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable thumbs'),
    '#default_value' => $settings['fancybox_options']['helpers']['enable_thumbs'],
  );

  $element['fancybox_options']['helpers']['thumbs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Thumbs'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[fancybox_options][helpers][enable_thumbs]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $element['fancybox_options']['helpers']['thumbs']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $settings['fancybox_options']['helpers']['thumbs']['width'],
  );

  $element['fancybox_options']['helpers']['thumbs']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $settings['fancybox_options']['helpers']['thumbs']['height'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gallery_link_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = t('Place a Gallery Link with %style images and the trigger text is "%link_text".', array(
    '%style' => $settings['style'],
    '%link_text' => $settings['link_text'],
  ));

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function gallery_link_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  drupal_add_js(libraries_get_path('fancybox') . '/source/jquery.fancybox.pack.js');
  drupal_add_css(libraries_get_path('fancybox') . '/source/jquery.fancybox.css');
  drupal_add_js(drupal_get_path('module', 'gallery_link') . '/gallery_link.js');
  drupal_add_css(libraries_get_path('fancybox') . '/source/jquery.fancybox.css');
  // Get default settings.
  $defaults = gallery_link_field_formatter_info();
  $defaults = $defaults['gallery_link']['settings']['fancybox_options'];

  $element = array();
  // We store all settings in a variable.
  $settings = $display['settings'];
  // We also store the settings directly in a variable.
  $style = $settings['style'];
  $link_text = $settings['link_text'];
  $fancybox_options = $settings['fancybox_options'];

  if (module_exists('token')) {
    $link_text = token_replace($link_text, array($entity_type => $entity), array('clear' => TRUE));
  }

  // Remove default values from settings.
  foreach ($fancybox_options as $group => $options) {
    foreach ($options as $option => $value) {
      if (is_array($value)) {
        foreach ($value as $k => $v) {
          if ($v == $defaults[$group][$option][$k]) {
            unset($fancybox_options[$group][$option][$k]);
          }
        }
        continue;
      }
      if ($value == $defaults[$group][$option]) {
       unset($fancybox_options[$group][$option]);
      }
    }
  }

  // Merge all groups expect 'helpers' group.
  foreach ($fancybox_options as $group => $options) {
    if ($group == 'helpers') {
      continue;
    }

    $fancybox_options = array_merge($fancybox_options, $fancybox_options[$group]);
    unset($fancybox_options[$group]);
  }

  if (isset($fancybox_options['mouseWheel']) && $fancybox_options['mouseWheel']) {
    drupal_add_js(libraries_get_path('fancybox') . '/lib/jquery.mousewheel-3.0.6.pack.js');
    unset($fancybox_options['mouseWheel']);
  }

  // Special handling for title, buttons and thumbs.
  if (count($fancybox_options['helpers'])) {
    if (isset($fancybox_options['helpers']['title_position']) && $fancybox_options['helpers']['title_position']) {
      $fancybox_options['helpers']['title']['type'] = $fancybox_options['helpers']['title_position'];
      unset($fancybox_options['helpers']['title_position']);
    }

    if (isset($fancybox_options['helpers']['buttons']) && $fancybox_options['helpers']['buttons']) {
      drupal_add_js(libraries_get_path('fancybox') . '/source/helpers/jquery.fancybox-buttons.js');
      drupal_add_css(libraries_get_path('fancybox') . '/source/helpers/jquery.fancybox-buttons.css');
      $fancybox_options['helpers']['buttons'] = array();
    }

    if (isset($fancybox_options['helpers']['enable_thumbs']) && $fancybox_options['helpers']['enable_thumbs']) {
      drupal_add_js(libraries_get_path('fancybox') . '/source/helpers/jquery.fancybox-thumbs.js');
      drupal_add_css(libraries_get_path('fancybox') . '/source/helpers/jquery.fancybox-thumbs.css');
      unset($fancybox_options['helpers']['enable_thumbs']);
    }
    else {
      unset($fancybox_options['helpers']['thumbs']);
    }
  }

  // Remove 'keys' settings if empty.
  if (isset($fancybox_options['keys']) && !count($fancybox_options['keys'])) {
    unset($fancybox_options['keys']);
  }

  foreach (array('open', 'close', 'prev', 'next') as $key) {
    foreach ($fancybox_options[$key] as $k => $v) {
      $fancybox_options[$key . ucfirst($k)] = $v;
    }
    unset($fancybox_options[$key]);
  }

  $images = array();

  foreach ($items as $delta => $item) {
    $images[$delta]['href'] = $style ? image_style_url($style, $item['uri']) : file_create_url($item['uri']);

    // Store the image title.
    if (!empty($item['title'])) {
      $images[$delta]['title'] = check_plain($item['title']);
    }
  }

  $settings = array('images' => $images, 'options' => $fancybox_options);

  // We need an unique identifier for every Gallery Link.
  $id = drupal_html_id('gallery-link');

  // We put the $data array into the Drupal.settings.gallery_link.
  drupal_add_js(array('galleryLink' => array($id => $settings)), 'setting');

  // We add a an attribute which stores the gallery id.
  $link_options['attributes']['data-gallery-link'] = $id;

  // Now we print the link with given $link_text and all given $options.
  return array(
    array(
      '#type' => 'link',
      '#title' => $link_text,
      '#href' => '',
      '#options' => $link_options,
    ),
  );
}

