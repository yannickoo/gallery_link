<?php

/**
 * @file
 * Gallery link
 *
 * This module provides a field formatter for displaying images as gallery.
 */

/* We define the version of fancybox here so that it's easy to update. */
define('GALLERY_LINK_FANCYBOX_VERSION', '1.3.4');

/**
 * Implements hook_theme().
 */
function gallery_link_theme() {
  return array(
    'gallery_link' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function gallery_link_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {

    // Get path to fancybox library.
    $path = libraries_get_path('fancybox');
    // Check whether necessary css and js files are available.
    $css = file_exists($path . '/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.css');
    $js = file_exists($path . '/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.pack.js');

    // If they not available, report an error.
    if (!$css && !$js) {
      $requirements['gallery_link_fancybox'] = array(
        'title' => $t('Gallery link'),
        'value' => $t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('You need to <a href="!url">download</a> fancybox @version and put the extracted fancybox folder into <code>sites/all/libraries/</code>.', array(
          '!url' => url('http://fancybox.googlecode.com/files/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.zip'),
          '@version' => GALLERY_LINK_FANCYBOX_VERSION,
        )),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_field_formatter_info().
 */
function gallery_link_field_formatter_info() {
  return array(
    'gallery_link_formatter' => array(
      'label' => t('Gallery link'),
      'field types' => array('image'),
      'settings' => array(
        'style' => 'thumbnail',
        'trigger_text' => 'Open gallery',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function gallery_link_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  // This gets the view mode where the settings are stored.
  $display = $instance['display'][$view_mode];
  // This gets the settings.
  $settings = $display['settings'];

  $element = array();

  // Load all image styles.
  $styles = image_styles();
  $styles = drupal_map_assoc(array_keys($styles));

  $element['style'] = array(
    '#type' => 'select',
    '#title' => t('Image style'),
    '#description' => t('Select the style of the gallery images'),
    '#default_value' => $settings['style'],
    '#options' => $styles,
  );

  $element['trigger_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Trigger text'),
    '#description' => t('This text triggers the gallery on click.'),
    '#default_value' => $settings['trigger_text'],
  );

  // @TODO: Add more settings like fancybox options etc.
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gallery_link_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Show a gallery link where the used style is "@style" and the trigger text is "@trigger_text".', array(
    '@style' => $settings['style'],
    '@trigger_text' => $settings['trigger_text'],
      ));
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function gallery_link_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // We store all settings in a variable.
  $settings = $display['settings'];
  // We also store the settings directly in a variable.
  $size = $settings['style'];
  $tooltip = $settings['trigger_text'];

  $gallery_items = array();
  foreach ($items as $item) {
    // Store every file id.
    $gallery_items[] = $item['fid'];
  }
  $element[0]['#markup'] = theme('gallery_link', $gallery_items, $settings['trigger_text'], $settings['style']);
  return $element;
}

/**
 * Returns a boolean whether an imagecache preset is available
 *
 * @param string $style
 *   The name of the image style.
 *
 * @return boolean
 *   Whether style is available or not.
 */
function _gallery_link_imagecache_preset_available($style) {
  $style = check_plain($style);
  // We build an array where we're putting previous queries for caching.
  static $styles = array();

  if (!count($styles)) {
    $styles = image_styles();
    $styles = array_keys($styles);
  }

  if (in_array($style, $styles)) {
    return TRUE;
  }
  else {
    // If the wanted imagecache preset isn't available we report it!
    watchdog('gallery_link', "Style %style doesn't exist.", array('%style' => $style), array(), WATCHDOG_ERROR);
  }

  return FALSE;
}

/**
 * Returns a link which triggers a gallery
 *
 * @param array $items
 *   An array which contains the images and
 *   optionally the titles (captions).
 *   $items = array(
 *     array('file' => $fid),
 *     array('file' => $fid),
 *     array('file' => $fid, 'title' => 'Caption'),
 *   );
 * @param string $link_text
 *   This is the text of the trigger link
 * @param string $style
 *   The images will be display with this image style
 * @param array $link_options
 *   (optional) Here can you pass an array which is structured like the options
 *   from the l() function
 * @param array $fancybox_options
 *   (optional) Here you can pass an array which defines the fancybox options
 *   (http://fancybox.net/api)
 *
 * @return string
 *   A link which triggers the gallery on click
 */
function theme_gallery_link($items = array(), $link_text = 'Open gallery', $style = NULL, $link_options = array(), $fancybox_options = array()) {
  // We count so that we can support multiple galleries.
  static $counter = 0;
  $data = array();
  $data['images'] = array();
  $output = '';
  if (!empty($style) && !_gallery_link_imagecache_preset_available($style)) {
    // If $style is set but isn't available we empty $style.
    $style = '';
  }
  foreach ($items as $delta => $item) {
    $data['images'][$delta]['href'] = !empty($style) ? gallery_link_get_file_path($item['file'], $style) : gallery_link_get_file_path($item['file']);
    // If a title (caption) was added we put it in our array.
    if (!empty($item['title'])) {
      $data['images'][$delta]['title'] = check_plain($item['title']);
    }
  }

  if (isset($fancybox_options) && $fancybox_options) {
    $data['options'] = $fancybox_options;
  }

  // We add needed files for fancybox and our custom javascript file.
  drupal_add_css(libraries_get_path('fancybox') . '/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.css');
  drupal_add_css(drupal_get_path('module', 'gallery_link') . '/gallery_link.css');
  drupal_add_js(libraries_get_path('fancybox') . '/jquery.fancybox-' . GALLERY_LINK_FANCYBOX_VERSION . '.pack.js');
  drupal_add_js(drupal_get_path('module', 'gallery_link') . '/gallery_link.js');

  // We put the $data array into the Drupal.settings.gallery_link.
  drupal_add_js(array('gallery_link' => array($data)), 'setting');

  // We add a an attribute which stores the gallery id ($counter)
  $link_options['attributes']['data-gallery-id'] = $counter;

  // Now we print the link with given $link_text and all given $options
  $output .= l($link_text, '', $link_options);

  $counter++;

  return $output;
}

/**
 * Returns a path to a file
 *
 * @param string|int $file
 *   Can be a file id or a file path
 * @param string $style
 *   (optional) The name of the image style you want
 *
 * @return string
 *   Path to requested file
 */
function gallery_link_get_file_path($file, $style = NULL) {
  // We check whether $file can be a file id.
  if (is_numeric($file)) {
    // We load the file.
    $file = file_load($file);
    if ($file) {
      // We check whether a preset was given and imagecache module is enabled.
      if (isset($style)) {
        // We check whether the given preset exists.
        if (_gallery_link_imagecache_preset_available($style)) {
          $path = url(image_style_url($style, $file->uri));
        }
        else {
          // If the given preset isn't available we use normal path.
          $path = url(file_create_url($file->uri));
        }
      }
      else {
        $path = url(file_create_url($file->uri));
      }
    }
    else {
      $path = '';
    }
  }
  else {
    // $file isn't numeric so we guess that this is a file path.
    $path = $file;

    // We check if the file path could be an internal one.
    $path_parsed = parse_url($path);
    if (!isset($path_parsed['scheme'])) {
      if (strpos($path, '/') === 0) {
        $path = drupal_substr($path, 1);
      }
      $path = url(image_style_url($style, $path));
    }
  }
  return $path;
}
